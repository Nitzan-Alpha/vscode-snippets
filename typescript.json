	"Pseudo-enum": {
		"prefix": [
			"enum",
			"pseudo-enum",
		],
		"body": [
			"/**",
			" * @todo documentation",
			" *",
			" * @since $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR",
			" */",
			"class ${1:Enum} {",
			"  //------ Instances ------//",
			"",
			"  $0",
			"  static readonly INSTANCE = new ${1:Enum}('instance');",
			"",
			"  //------ Static Methods ------//",
			"",
			" static get values(): ${1:Enum}[] {",
			"    return [];",
			"  }",
			"",
			"  /**",
			"   * Converts a string to its corresponding ${1:Enum} instance.",
			"   *",
			"   * @param string the string to convert to ${1:Enum}",
			"   * @throws RangeError, if a string that has no corressonding ${1:Enum} value was passed.",
			"   * @returns the matching ${1:Enum}",
			"   */",
			"  static fromString(string: string): ${1:Enum} {",
			"    const values = this.values",
			"   for(let i = 0; i < values.length; i++) {",
			"        const value = values[i];",
			"        if(value.name === string) {",
			"           return value",
			"        }",
			"    }",
			"    //If we've reached here, an illegal string was passed",
			"    throw new RangeError(`Illegal argument passed to fromString(): \\${string\\} does not correspond to any instance of the enum \\${(<any>this).constructor.name\\}`)",
			"}",
			"",
			" //------ Constructor------//",
			"",
			"  private constructor(",
			"    /**",
			"     * The name of the instance; should typically be the variable name, undercased.",
			"     */",
			"    public name: string",
			"  ) {}",
			"",
			"  //------ Methods ------//",
			"",
			"  /**",
			"   * Called when converting the ${1:Enum} value to a string using JSON.Stringify",
			"   */",
			"  public toJSON() {",
			"   return name;",
			" }",
			"}",
			"",
			"export default ${1:Enum};"
		],
		"description": "Create a pseudo-enum class pattern"
	}
