"Pseudo-enum": {
		"prefix": [
			"enum",
			"pseudo-enum",
		],
		"body": [
			"/**",
			" * @todo documentation",
			" *",
			" * @since $CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR",
			" */",
			"class ${1:Enum} {",
			"  //------ Instances ------//",
			"",
			"  static readonly INSTANCE = new ${1:Enum}('INSTANCE');",
			"  static readonly INSTANCE2 = new ${1:Enum}('INSTANCE2');",
			"",
			"  //------ Static Methods ------//",
			"",
			"  static get values(): ${1:Enum}[] {",
			"    return [this.INSTANCE, this.INSTANCE2];",
			"  }",
			"",
			"  /**",
			"   * Converts a string to its corresponding ${1:Enum} instance.",
			"   *",
			"   * @param string the string to convert to ${1:Enum}",
			"   * @throws RangeError, if a string that has no corressonding ${1:Enum} value was passed.",
			"   * @returns the matching ${1:Enum}",
			"   */",
			"  static fromString(string: string): ${1:Enum} {",
			"    // Works assuming the name property of the enum is identical to the variable's name.",
			"    const value = (this as any)[string];",
			"    if (value) {",
			"      return value;",
			"    }",
			"",
			"    throw new RangeError(",
			"      `Illegal argument passed to fromString(): \\${string\\} does not correspond to any instance of the enum \\${",
			"        (this as any).prototype.constructor.name",
			"      \\}`",
			"    );",
			"  }",
			"",
			"  //------ Constructor------//",
			"",
			"  private constructor(",
			"   /**",
			"    * The name of the instance; should be exactly the variable name,",
			"    * for serializing/deserializing simplicity.",
			"    */",
			"    public readonly name: string",
			"  ) {}",
			"",
			"  //------ Methods ------//",
			"",
			"  /**",
			"   * Called when converting the ${1:Enum} value to a string using JSON.Stringify.",
			"   * Compare to the fromString() method, which deserializes the object.",
			"   */",
			"  public toJSON() {",
			"    return this.name;",
			"  }",
			"}",
			"",
			"export default ${1:Enum};",
		],
		"description": "Create a pseudo-enum class pattern"
	}
