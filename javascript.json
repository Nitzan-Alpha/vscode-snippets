"Pseudo-Enum": {
	"prefix": [
		"enum",
		"pseudo-enum"
	],
	"body": [
		"/**",
		" * @todo documentation",
		" * ",
		" * @since 11/04/20",
		" */",
		"const ${1:Enum} = (function () {",
		"",
		"   // The (required) public constructor; throws an error when called.",
		"    function ${1:Enum}() {",
		"        throw new TypeError(`Class ${1:Enum} is an enum; instances of it cannot be constructed.`);",
		"    }",
		"",
		"   // The private, actual constructor",
		"    var ${1:Enum}Inner = function (name) {",
		"       this.name = name",
		"    };",
		"",
		"    // Setting the inner class to be a subclass of the outer class (for instanceof checks)",
		"    ${1:Enum}Inner.prototype = ${1:Enum}.prototype;",
		"",
		"    // Defining instances",
		"    Object.defineProperties(${1:Enum}, {",
		"        //Instances",
		"        INSTANCE1$0: {",
		"           value: Object.freeze(new ${1:Enum}Inner('instance1')),",
		"            enumerable: true",
		"        }",
		"    })",
		"",
		"    // Static methods & properties",
		"    Object.defineProperties(${1:Enum}, {",
		"        values: {",
		"           get: function () {",
		"               return [this.INSTANCE1]",
		"           }",
		"        },",
		"        fromString: {",
		"            value: function () {",
		"                const values = this.values;",
		"                for (let i = 0; i < values.length; i++) {",
		"                    const value = values[i];",
		"                    if (value.name === string) {",
		"                        return value;",
		"                    }",
		"                }",
		"               //If we've reached here, an illegal string was passed",
		"                throw new RangeError(",
		"                    `Illegal argument passed to fromString(): \\${string\\} does not correspond to any instance of the enum \\${this.constructor.name\\}`",
		"               );",
		"            }",
		"       }",
		"    })",
		"",
		"    Object.freeze(${1:Enum})",
		"    return ${1:Enum};",
		"}());",
		"",
		"export default ${1:Enum}"
	],
	"description": "Create a pseudo-enum class pattern"
},
"Section Comment": {
	"prefix": [
		"//",
		"Section comment"
	],
	"body": "//------ $0 ------//",
	"description": "Comment denoting a section in the code, typically a class section (fields, constructor, methods, etc.)."
}